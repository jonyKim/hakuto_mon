// lfit admin 서비스를 위해 구성한 테이블의 내용

-- 사용자 역할을 위한 ENUM 타입 생성
CREATE TYPE user_role AS ENUM ('admin', 'user');

-- 사용자 테이블 생성
CREATE TABLE users (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    wallet_address VARCHAR(42) UNIQUE NOT NULL,  -- Ethereum 주소는 42자 (0x + 40자)
    name VARCHAR(100) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    role user_role DEFAULT 'user',
    is_active BOOLEAN DEFAULT true,
    last_login_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- 미션 보상 설정 테이블 생성
CREATE TABLE mission_rewards (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    steps INTEGER NOT NULL,  -- 목표 걸음 수
    reward DECIMAL(10, 6) NOT NULL,  -- LFIT 보상량 (소수점 6자리까지)
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_by UUID REFERENCES users(id),
    UNIQUE(steps)  -- 동일한 걸음 수에 대한 중복 설정 방지
);

-- 광고 보상 설정 테이블 생성
CREATE TABLE ad_rewards (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    min_reward DECIMAL(10, 6) NOT NULL,  -- 최소 LFIT 보상량
    max_reward DECIMAL(10, 6) NOT NULL,  -- 최대 LFIT 보상량
    daily_limit INTEGER NOT NULL,  -- 일일 최대 보상 횟수
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_by UUID REFERENCES users(id),
    CONSTRAINT min_max_check CHECK (min_reward <= max_reward),
    CONSTRAINT positive_rewards CHECK (min_reward >= 0 AND max_reward >= 0),
    CONSTRAINT positive_limit CHECK (daily_limit > 0)
);

-- updated_at을 자동으로 업데이트하기 위한 트리거 함수
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- 각 테이블에 트리거 적용
CREATE TRIGGER update_users_updated_at
    BEFORE UPDATE ON users
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_mission_rewards_updated_at
    BEFORE UPDATE ON mission_rewards
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_ad_rewards_updated_at
    BEFORE UPDATE ON ad_rewards
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- 초기 데이터 삽입
INSERT INTO mission_rewards (steps, reward) VALUES
    (2000, 0.004),
    (5000, 0.008),
    (7000, 0.012),
    (10000, 0.015);

INSERT INTO ad_rewards (min_reward, max_reward, daily_limit) VALUES
    (0.001, 0.004, 4);

-- pgcrypto 확장 설치 (암호화를 위해 필요)
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- 관리자 계정 생성
INSERT INTO users (
    wallet_address,
    name,
    email,
    password_hash,
    role
) VALUES (
    '0x0000000000000000000000000000000000000000',  -- 실제 지갑 주소로 변경 필요
    '관리자',
    'admin@lfit.com',
    crypt('admin123!@', gen_salt('bf')),  -- Blowfish 알고리즘으로 비밀번호 해시화
    'admin'
);

-- 생성된 관리자 계정 확인
SELECT id, name, email, role, wallet_address, created_at 
FROM users 
WHERE email = 'admin@lfit.com';


-- 미션 보상 지급 이력 테이블
CREATE TABLE mission_reward_claims (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES users(id),
    wallet_address VARCHAR(42) NOT NULL,  -- 빠른 조회를 위해 중복 저장
    mission_id UUID NOT NULL REFERENCES mission_rewards(id),
    steps_achieved INTEGER NOT NULL,      -- 달성한 걸음 수
    reward_amount DECIMAL(10, 6) NOT NULL, -- 지급된 LFIT 수량
    claim_status VARCHAR(20) DEFAULT 'PENDING' 
        CHECK (claim_status IN ('PENDING', 'COMPLETED', 'FAILED')),
    transaction_hash VARCHAR(66),         -- 블록체인 트랜잭션 해시
    claimed_at DATE NOT NULL DEFAULT CURRENT_DATE, -- 날짜별 통계를 위한 필드
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- 같은 사용자가 같은 날짜에 같은 미션을 중복 신청할 수 없음
    CONSTRAINT unique_daily_mission 
        UNIQUE (user_id, mission_id, claimed_at)
);

-- 광고 보상 지급 이력 테이블
CREATE TABLE ad_reward_claims (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES users(id),
    wallet_address VARCHAR(42) NOT NULL,  -- 빠른 조회를 위해 중복 저장
    reward_amount DECIMAL(10, 6) NOT NULL, -- 지급된 LFIT 수량
    claim_status VARCHAR(20) DEFAULT 'PENDING' 
        CHECK (claim_status IN ('PENDING', 'COMPLETED', 'FAILED')),
    transaction_hash VARCHAR(66),         -- 블록체인 트랜잭션 해시
    claimed_at DATE NOT NULL DEFAULT CURRENT_DATE, -- 날짜별 통계를 위한 필드
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- 일일 광고 시청 횟수를 추적하기 위한 인덱스
CREATE INDEX idx_ad_claims_user_date 
    ON ad_reward_claims (user_id, claimed_at);

-- 날짜별 통계를 위한 인덱스
CREATE INDEX idx_mission_claims_date 
    ON mission_reward_claims (claimed_at);
CREATE INDEX idx_ad_claims_date 
    ON ad_reward_claims (claimed_at);

-- 지갑 주소별 조회를 위한 인덱스
CREATE INDEX idx_mission_claims_wallet 
    ON mission_reward_claims (wallet_address);
CREATE INDEX idx_ad_claims_wallet 
    ON ad_reward_claims (wallet_address);

-- updated_at 자동 업데이트 트리거 적용
CREATE TRIGGER update_mission_reward_claims_updated_at
    BEFORE UPDATE ON mission_reward_claims
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_ad_reward_claims_updated_at
    BEFORE UPDATE ON ad_reward_claims
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- 유용한 통계 뷰 생성
CREATE VIEW daily_mission_stats AS
SELECT 
    claimed_at,
    mission_id,
    COUNT(*) as total_claims,
    SUM(reward_amount) as total_rewards,
    COUNT(CASE WHEN claim_status = 'COMPLETED' THEN 1 END) as completed_claims,
    COUNT(CASE WHEN claim_status = 'FAILED' THEN 1 END) as failed_claims
FROM mission_reward_claims
GROUP BY claimed_at, mission_id;

CREATE VIEW daily_ad_stats AS
SELECT 
    claimed_at,
    COUNT(*) as total_views,
    COUNT(DISTINCT user_id) as unique_users,
    SUM(reward_amount) as total_rewards,
    AVG(reward_amount) as avg_reward
FROM ad_reward_claims
GROUP BY claimed_at;

-- 사용자별 일일 광고 시청 횟수를 확인하는 함수
CREATE OR REPLACE FUNCTION get_daily_ad_views(user_id_param UUID, date_param DATE)
RETURNS INTEGER AS $$
BEGIN
    RETURN (
        SELECT COUNT(*)
        FROM ad_reward_claims
        WHERE user_id = user_id_param
        AND claimed_at = date_param
    );
END;
$$ LANGUAGE plpgsql;